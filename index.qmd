---
title: "In the Nix of Time"
subtitle: "A new approach to Shiny development & deployment with Nix and {rix}"
title-slide-attributes: 
  data-background-image: assets/img/futuristic_city.jpg
  data-background-size: contain
  data-background-opacity: "0.4"
  data-background-color: black
format:
  revealjs: 
    link-external-newwindow: true
    menu: true
    theme: [default, custom.scss]
    code-line-numbers: false
    footer: "[rpodcast.github.io/nix-shinyconf2025/](https://rpodcast.github.io/nix-shinyconf2025/)"
author: 
  - name: Eric Nantz
    affiliation:
      - Statistician / Developer / Podcaster
      - Eli Lilly & Company
      - "{{< fa brands bluesky >}} [@rpodcast.bsky.social](https://bsky.app/profile/rpodcast.bsky.social)"
      - "{{< fa brands mastodon >}} [@rpodcast@podcastindex.social](https://podcastindex.social/@rpodcast)"
      - "{{< fa brands linkedin >}} [@eric-nantz](https://www.linkedin.com/in/eric-nantz-6621617/)"
date: April 11, 2025
revealjs-plugins:
  - codewindow
---

## It's Never Just Shiny ...

:::: {.columns}

::: {.column width="60%"}
* Additional R packages
* External services or APIs
* Other languages (Python, JavaScript)
* Software dependencies for packages 
* Deployment platforms
:::

::: {.column width="40%"}

![](assets/img/warehouse.jpg)

:::

::::

## Managing Dependencies

::: {.r-stack}
![](assets/img/renv.svg){.fragment .absolute top=100 left=0 width="40%"}

![](assets/img/docker-logo-blue.svg){.fragment .absolute top=250 right=50 width="50%"}
:::

## Slide 2

![](https://vhs.charm.sh/vhs-6j0gMkv7ymBp3UfiZHik8w.gif)

## {#lupslide-id data-menu-title="Linux Friends"}

::: {.r-stack}

![](assets/img/jb_collage.png){.fragment}

![](assets/img/martin_wimpress.png){.fragment}

![](assets/img/martin_livestream_screengrab.png){.fragment}
:::

::: {.notes}
Left half: JB with their logo and headshots, then show screen grabs of each Nix focused episode player
* Nix challenge launched in March 2022

Right half: Martin Wimpress, show screengrab of youtube livestream
* Martin Wimpress joins Determinant Systems in 2023
* Livestream with his public exploration of Nix https://www.youtube.com/watch?v=v9GM8k9Aa7k
* Aired April 6, 2023
:::

## Worlds Collide {#brunoslide-id data-menu-title="Bruno Discovers Nix"}

::: {.r-stack}

::: {.fragment}
![](assets/img/bruno.jpg){.absolute top=200 left=0 width="30%"}

::: {.absolute top=530 left=0}
Bruno Rodriguez
:::

:::

::: {.fragment}
![](assets/img/rweekly_issue_top.png){.absolute top=40 right=10}

![](assets/img/rweekly_issue_bottom.png){.absolute top=230 right=10}
:::

![](assets/img/bruno_series_all.png){.fragment .absolute top=60 right=0}
:::


::: {.notes}
![](assets/img/bruno_nix_part1.png){.fragment .absolute top=500 left=0}

* July 2023 https://brodrigues.co/posts/2023-07-13-nix_for_r_part1.html
* Covered practically his entire series on Nix with R Weekly
    * 2024-W15 (Part 11) - highlight
    * 2024-W40 (rix on CRAN) - highlight
    * 2023-W32 (part 3)
    * 2023-W29 (part 1) - highlight https://brodrigues.co/posts/2023-07-13-nix_for_r_part1.html
    * 2024-W02 (part 8)
    * 2023-W30 (part 2)
    * 2024-W10 (part 10)
    * 2023-W43 (part 7)
    * 2023-W33 (YouTube video introducing Nix)
    * 2024-W36 (part 12)
    * 2023-W38 (part 5)
    * 2024-W20 (Reproducible Nix workshop)
    * 2024-W06 (part 9)
    * 2023-W34 (part 4)
    * 2024-W28 (YouTube video introducing Rix)
    * 2023-W35 (YouTube video running old project with old R and old packages)
    * 2023-W47 (YouTube video GH actions with Nix)
:::

# ðŸ¤” What is Nix?

## {#nixhighlevel-id data-menu-title="Nix High-Level Overview"}

::: {.r-fit-text}
Package Manager

Domain-Specific Language

Immutable Installation

Sandboxed Environments
:::

# ðŸ¤” Again, what is Nix?



::: {.notes}
* At heart: Nix is a package manager
* Key features
    + All build files collected in the **Nix store** (like graph database)
    * Immutable, read-only file system
    * Nix is also a functional language used to describe derivations
    * Similar to Git: Each path in the Nix store is a hash value based on all input information for that piece of software
    * Derivations give build instructions for items in Nix store
* Everything is explicit, transparent
* Purely functional language (uses immutability of the nix store)
* Lazy language, dynamically typed
* Mention history of Nix (founder, their dissertation)
:::

## A Package Manager

:::: {.columns}

::: {.column width="50%"}

* Collection of over 120,000 **recipes** of apps, utilities, languages, etc.
* Package repository `nixpkgs` available on [GitHub]()
    * Ability to pin repository to specific point in time
* Required system dependencies are automatically installed

:::

::: {.column width="50%"}

![](assets/img/nix_packages_searchbar.png)

![](assets/img/nix_package_R_entry.png)

:::

::::

## Installing Nix

**Easy Mode**: [Determinant Systems Nix Installer](https://zero-to-nix.com/start/install/)

::: {.codewindow}
```bash
curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | \
sh -s -- install
```
:::

* Supported platforms: Linux, Mac OS X, and Windows (via Windows Subsystem for Linux)

::: {.notes}

https://zero-to-nix.com/start/install/

:::

## Try Before You Buy!

::: {.notes}
pokemonsay: https://github.com/HRKings/pokemonsay-newgenerations 

run this on thelio (navigate to /mnt/media_drive2/quickemu_vm/quickemu_new_version)

quickemu --vm ubuntu-server-24.04.conf --display none

Then in the same host (thelio) connect to the VM via ssh:

ssh ubuntunix


:::


## Nix Store

Like a graph database
* Entries in store are like nodes, relationships among them are edges

```bash
# edges pointing to R
nix-store --query --references $(which R)

# edges pointing from R (i.e. packages)
nix-store --query --referers $(which R)

# transitive closure (recursive dependencies)
nix-store --query --requisites $(which R)

# graph
nix-store --query --graph $(which R) | dot -Tsvg -o scratch/r.svg

# nix-visualize
# https://github.com/craigmbooth/nix-visualize
nix run github:craigmbooth/nix-visualize -- $(which R) -s R -o scratch/r_graph_depviz.png
```

## R Graph

![](assets/img/r_graph_depviz.svg)


## History of Nix

::: {.notes}
* Eelco Dolstra came up with the idea of Nix in his dissertation (A tool called Maak)
* NixOS in 2006 - Started as an experiment to verify build purity
:::

## Mythbusting

* Myth 1: Nix is an entire operating system
    * That is NixOS
    * You can use Nix on most Linux distributions, Mac OS X, Windows via WSL
* Not a full container, not a full VM


## Advantages over containers

* Less overhead
* Still feels like native use of OS
* No need for volume mounts

## A Few Papercuts remain

* Compiles from source for package versions not available in a binary cache
* Disk space usage could be an issue on lower-spec hardware
* Debugging Nix errors can be on the cryptic side

## Why for Shiny?

* It's never just Shiny ...
* Manage dependencies not just at the R level
* Support multi-lingual projects
